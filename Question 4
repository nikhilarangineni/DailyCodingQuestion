// C# program to find count of single valued subtrees  

/* Class containing left and right child of current   
 node and key value*/
using System; 

public class Node 
{ 
    public int data; 
    public Node left, right; 
  
    public Node(int item) 
    { 
        data = item; 
        left = right = null; 
    } 
} 
  
public class Count 
{ 
    public int count = 0; 
} 
  
public class BinaryTree 
{ 
    public Node root; 
    public Count ct = new Count(); 
  
	/* This function increments count by number of single   
     valued subtrees under root. It returns true if subtree   
     under root is Single, else false. */
    public virtual bool countSingleRec(Node node, Count c) 
    { 
        // Return false to indicate NULL  
        if (node == null) 
        { 
            return true; 
        } 
  
        // Recursively count in left and right subtrees 
        bool left = countSingleRec(node.left, c); 
        bool right = countSingleRec(node.right, c); 
  
        // If any of the subtrees is not single, then this cannot be single.
        if (left == false || right == false) 
        { 
            return false; 
        } 
  
        // If left subtree is single and non-empty, but the data doesn't match  
        if (node.left != null && node.data != node.left.data) 
        { 
            return false; 
        } 
  
        // Same for the right subtree  
        if (node.right != null && node.data != node.right.data) 
        { 
            return false; 
        } 
  
        /*If none of the above conditions are true, then  
          tree rooted under root is single valued, increment  
          count and return true.*/  
        c.count++; 
        return true; 
    } 
  
    // This function mainly calls countSingleRec() after initializing count as 0  
    public virtual int countSingle() 
    { 
        return countSingle(root); 
    } 
  
    public virtual int countSingle(Node node) 
    { 
        // Recursive function to count  
        countSingleRec(node, ct); 
        return ct.count; 
    } 
  
    // Driver program to test above functions  
    public static void Main(string[] args) 
    { 
           /* Let us construct the below tree  
                5  
              /   \  
            3      5  
          /  \      \  
         3    3      5 */
        BinaryTree tree = new BinaryTree(); 
        tree.root = new Node(5); 
        tree.root.left = new Node(3); 
        tree.root.right = new Node(5); 
        tree.root.left.left = new Node(3); 
        tree.root.left.right = new Node(3); 
        tree.root.right.right = new Node(5); 
  
        Console.WriteLine("The number of unival trees is : " + tree.countSingle()); 
    } 
} 
